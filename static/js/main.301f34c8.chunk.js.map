{"version":3,"sources":["comp/Home.js","comp/Graph.js","comp/Main.js","comp/CorGraph.js","comp/Company.js","comp/FeelGraph.js","comp/Service.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","border","Graph","d","useState","gData","setGdata","useEffect","data","keys","indexBy","margin","top","right","bottom","left","padding","valueScale","type","indexScale","round","valueFormat","format","enabled","colors","scheme","defs","id","background","color","size","stagger","rotation","lineWidth","spacing","fill","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","style","Main","subject","Corona","DATA","setData","tit","DESCRIPTION","push","onChange","e","filter","day","target","value","map","k","dataView","CorGraph","Company","Test","FeelGraph","console","log","xScale","yScale","min","max","stacked","reverse","yFormat","orient","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","pointLabelYOffset","useMesh","symbolShape","symbolBorderColor","itemBackground","Service","Feel","feel","feelDat","forEach","c","App","to","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.301f34c8.chunk.js","sourcesContent":["// Home.js\r\n\r\n\r\nexport default function Home(){\r\n\r\n    return(\r\n        <div className=\"first\">\r\n           <h2 className=\"title\"> 코로나 바이러스 감염증-19</h2>\r\n            <p className=\"mean\"><h3>정의</h3>  2019년 12월 중국 우한에서 처음 발생한 이후 중국 전역과 전 세계로 확산된, 새로운 유형의 코로나바이러스(SARS-CoV-2)에 의한 호흡기 감염질환이다. 코로나바이러스감염증-19는 감염자의 비말(침방울)이 호흡기나 눈·코·입의 점막으로 침투될 때 전염된다. 감염되면 약 2~14일(추정)의 잠복기를 거친 뒤 발열(37.5도) 및 기침이나 호흡곤란 등 호흡기 증상, 폐렴이 주증상으로 나타나지만 무증상 감염 사례 빈도도 높게 나오고 있다.</p>\r\n            <table border=\"1\" className=\"chart\" >\r\n                <tr>\r\n                    <td><b>외국어표기</b></td> \r\n                    <td>corona virus disease 19</td>\r\n                    <td>COVID-19</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>최초 발생</b></td> \r\n                    <td>2019년 12월</td>\r\n                    <td>중국 후베이성 우환</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>질병 분류</b></td> \r\n                    <td>법정감염병:제 1급 감염병 신종감염병증후군</td>\r\n                    <td>질병코드:U07.1</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>병원체</b></td> \r\n                    <td>Servere Acute Respiratory Syndrome-Coronavirus-2</td>\r\n                    <td>Coronaviriadae family, Betacoronavirus genus Sarbecovirus subgenus에 속함</td>\r\n                </tr>\r\n                <tr>\r\n                    <td><b>잠복기</b></td> \r\n                    <td>1~14일 (평균5~7일)</td>\r\n                    \r\n                </tr>\r\n            </table>\r\n        </div>\r\n    );\r\n}"," //comp > Graph.js\r\n import {useEffect, useState} from \"react\";\r\n import \"../App.css\";\r\n import { ResponsiveBar } from '@nivo/bar';\r\n \r\n export default function Graph({d}){\r\n     let [gData,setGdata] = useState(d);\r\n     //1차 접종자 - fir_inc, fir_inc1\r\n     //2차 접종자 - scd_inc, scd_inc1    \r\n     useEffect(()=>{\r\n         setGdata (\r\n             [\r\n                 {\r\n                     \"country\": \"1차 접종자\",\r\n                     \"hot dog\": d[0]['fir_inc'],\r\n                     \"burger\": d[0]['fir_inc1']\r\n                 },\r\n                 {     \r\n                     \"country\": \"2차 접종자\",\r\n                     \"hot dog\": d[0]['scd_inc'],\r\n                     \"burger\": d[0]['scd_inc1']\r\n                 }\r\n             ]\r\n         );\r\n     },[d]);\r\n     \r\n \r\n     return(\r\n         \r\n         <div className=\"grap\">\r\n             <ResponsiveBar\r\n                 data={gData}\r\n                 keys={[ 'hot dog','burger']}\r\n                 indexBy=\"country\"\r\n                 margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n                 padding={0.3}\r\n                 valueScale={{ type: 'linear' }}\r\n                 indexScale={{ type: 'band', round: true }}\r\n                 valueFormat={{ format: '', enabled: false }}\r\n                 colors={{ scheme: 'nivo' }}\r\n                 defs={[\r\n                     {\r\n                         id: 'dots',\r\n                         type: 'patternDots',\r\n                         background: 'inherit',\r\n                         color: '#38bcb2',\r\n                         size: 4,\r\n                         padding: 1,\r\n                         stagger: true\r\n                     },\r\n                     {\r\n                         id: 'lines',\r\n                         type: 'patternLines',\r\n                         background: 'inherit',\r\n                         color: '#eed312',\r\n                         rotation: -45,\r\n                         lineWidth: 6,\r\n                         spacing: 10\r\n                     }\r\n                 ]}\r\n                 fill={[\r\n                     {\r\n                         match: {\r\n                             id: 'fries'\r\n                         },\r\n                         id: 'dots'\r\n                     },\r\n                     {\r\n                         match: {\r\n                             id: 'sandwich'\r\n                         },\r\n                         id: 'lines'\r\n                     }\r\n                 ]}\r\n                 borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                 axisTop={null}\r\n                 axisRight={null}\r\n                 axisBottom={{\r\n                     tickSize: 5,\r\n                     tickPadding: 5,\r\n                     tickRotation: 0,\r\n                     legend: '코로나 예방접종 현황',\r\n                     legendPosition: 'middle',\r\n                     legendOffset: 32\r\n                 }}\r\n                 axisLeft={{\r\n                     tickSize: 5,\r\n                     tickPadding: 5,\r\n                     tickRotation: 0,\r\n                     legend: 'food',\r\n                     legendPosition: 'middle',\r\n                     legendOffset: -40\r\n                 }}\r\n                 labelSkipWidth={12}\r\n                 labelSkipHeight={12}\r\n                 labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                 legends={[\r\n                     {\r\n                         dataFrom: 'keys',\r\n                         anchor: 'bottom-right',\r\n                         direction: 'column',\r\n                         justify: false,\r\n                         translateX: 120,\r\n                         translateY: 0,\r\n                         itemsSpacing: 2,\r\n                         itemWidth: 100,\r\n                         itemHeight: 20,\r\n                         itemDirection: 'left-to-right',\r\n                         itemOpacity: 0.85,\r\n                         symbolSize: 20,\r\n                         effects: [\r\n                             {\r\n                                 on: 'hover',\r\n                                 style: {\r\n                                     itemOpacity: 1\r\n                                 }\r\n                             }\r\n                         ]\r\n                     }\r\n                 ]}\r\n              />\r\n         </div>\r\n     );\r\n }\r\n ","//Main.js\r\nimport {useState} from \"react\";\r\nimport Corona from \"../data/corona19.json\";\r\nimport Graph from \"./Graph.js\";\r\n\r\nexport default function Main(){\r\n    let subject = [];\r\n    let [data,setData] = useState(Corona.DATA);\r\n\r\n    for(let tit in Corona.DESCRIPTION){\r\n        subject.push(Corona.DESCRIPTION[tit]);\r\n    }    \r\n    function dataChange(e){\r\n        setData(\r\n            Corona.DATA.filter(day => (\r\n                day['s_vc_dt'] == e.target.value\r\n            ))\r\n        );\r\n    }\r\n\r\n   \r\n    return(\r\n        <> \r\n            <section className=\"second\">\r\n                <h2>코로나 예방접종 현황</h2>\r\n                <div>\r\n                    <select id=\"day\" onChange={ dataChange}>\r\n                    {\r\n                        Corona.DATA.map(function(data,k){\r\n                            return (\r\n                                <option key={k}>\r\n                                    {data['s_vc_dt']}\r\n                                </option>\r\n                            )\r\n                        })\r\n                    }\r\n                    </select>\r\n                </div>\r\n\r\n                <table border=\"1\">\r\n                <thead>\r\n                    <tr>\r\n                        {\r\n                        subject.map(function(tit,k){\r\n                            return <th key={k}> {tit} </th>;\r\n                        })            \r\n                    }\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        data.map(function(dataView,k){\r\n                            return (\r\n                                <tr key={k}>   \r\n                                    <td>{dataView['scd_inc']}</td>\r\n                                    <td>{dataView['fir_inc1']}</td>\r\n                                    <td>{dataView['fir_inc_rate']}</td>\r\n                                    <td>{dataView['scd_inc1']}</td>\r\n                                    <td>{dataView['s_vc_dt']}</td>\r\n                                    <td>{dataView['scd_inc_rate']}</td>\r\n                                    <td>{dataView['fir_inc']}</td>\r\n                                    <td>{dataView['fir_sub']}</td>\r\n                                </tr>\r\n                            );\r\n                        })\r\n                    }       \r\n                </tbody>\r\n                </table>\r\n            </section>\r\n            <Graph d={data}/>\r\n        </>\r\n    );\r\n}","import {useEffect, useState} from \"react\";\r\nimport \"../App.css\";\r\nimport { ResponsiveBar } from '@nivo/bar';\r\nimport \"../data/corgraph.json\";\r\n\r\nexport default function CorGraph({d}){\r\n    let [gData,setGdata] = useState(d);\r\n    useEffect(()=>{\r\n        setGdata (\r\n            [\r\n                    {\r\n                      \"country\": \"확진환자\",\r\n                      \"All confirmed Corona\": 269362\r\n                    \r\n                    },\r\n                    {\r\n                      \"country\": \"09월10일 확진환자\",\r\n                      \"TODAY confirmed corona\": 1813\r\n                    \r\n                    },\r\n                    \r\n            ]\r\n        );\r\n    },[d]);\r\n    return(\r\n         \r\n        <div className=\"grap\">\r\n            <ResponsiveBar\r\n                data={gData}\r\n                keys={[ 'TODAY confirmed corona','All confirmed Corona']}\r\n                indexBy=\"country\"\r\n                margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n                padding={0.3}\r\n                valueScale={{ type: 'linear' }}\r\n                indexScale={{ type: 'band', round: true }}\r\n                valueFormat={{ format: '', enabled: false }}\r\n                colors={{ scheme: 'nivo' }}\r\n                defs={[\r\n                    {\r\n                        id: 'dots',\r\n                        type: 'patternDots',\r\n                        background: 'inherit',\r\n                        color: '#38bcb2',\r\n                        size: 4,\r\n                        padding: 1,\r\n                        stagger: true\r\n                    },\r\n                    {\r\n                        id: 'lines',\r\n                        type: 'patternLines',\r\n                        background: 'inherit',\r\n                        color: '#eed312',\r\n                        rotation: -45,\r\n                        lineWidth: 6,\r\n                        spacing: 10\r\n                    }\r\n                ]}\r\n                fill={[\r\n                    {\r\n                        match: {\r\n                            id: 'fries'\r\n                        },\r\n                        id: 'dots'\r\n                    },\r\n                    {\r\n                        match: {\r\n                            id: 'sandwich'\r\n                        },\r\n                        id: 'lines'\r\n                    }\r\n                ]}\r\n                borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: '코로나 지역확진 현황',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 32\r\n                }}\r\n                axisLeft={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: '차트',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -40\r\n                }}\r\n                labelSkipWidth={12}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                legends={[\r\n                    {\r\n                        dataFrom: 'keys',\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n             />\r\n        </div>\r\n    );\r\n}\r\n","// Company.js\r\nimport {useState} from \"react\";\r\nimport Test from \"../data/corona.json\";\r\nimport CorGraph from \"./CorGraph.js\";\r\n\r\nexport default function Company(){\r\n    let subject = [];\r\n    let [data,setData] = useState(Test.DATA);\r\n    \r\n    for(let tit in Test.DESCRIPTION){\r\n        subject.push(Test.DESCRIPTION[tit]);\r\n    }\r\n    function dataChange(e){\r\n        setData(\r\n            Test.DATA.filter(day => (\r\n                day['corona19_area'] == e.target.value\r\n            ))\r\n        );\r\n    }\r\n\r\n    return(\r\n        \r\n        <div className=\"third\"> \r\n            <h2>코로나 확진현황</h2>\r\n            <div>\r\n                <select onChange={dataChange}>\r\n                    {\r\n                        Test.DATA.map(function(data,k){\r\n                            return(\r\n                                <option key={k}>\r\n                                {data['corona19_area']}\r\n                            </option>\r\n                            )\r\n                        })\r\n                    }\r\n                </select>\r\n            </div>\r\n\r\n            <table border=\"1\">\r\n            <thead>\r\n                    <tr>\r\n                        {\r\n                        subject.map(function(tit,k){\r\n                            return <th key={k}> {tit} </th>;\r\n                        })            \r\n                    }\r\n                    </tr>\r\n                </thead>\r\n            <tbody>\r\n                {\r\n                    data.map(function(dataView,k){\r\n                        return(\r\n                            <tr key={k}>\r\n                                <td>{dataView['corona19_leave_status']}</td>\r\n                                <td>{dataView['corona19_idate']}</td>\r\n                                <td>{dataView['corona19_corrective']}</td>\r\n                                <td>{dataView['corona19_display_yn']}</td>\r\n                                <td>{dataView['corona19_id']}</td>\r\n                                <td>{dataView['corona19_contact_history']}</td>\r\n                                <td>{dataView['corona19_date']}</td>\r\n                                <td>{dataView['corona19_area']}</td>\r\n                            </tr>    \r\n                        )\r\n                    })\r\n                }\r\n            </tbody>\r\n            </table>\r\n            <h3>코로나 확진자 그래프</h3>\r\n            <CorGraph d={data}/>\r\n        </div>\r\n        \r\n    );\r\n}","import {useEffect, useState} from \"react\";\r\nimport \"../App.css\";\r\nimport { ResponsiveLine } from '@nivo/line';\r\nimport  datas from \"../data/feelgraph.json\";\r\n\r\nexport default function FeelGraph({d}){\r\n    let [gData,setGdata] = useState(d);\r\n    // console.log(d[0]['corona'])\r\n\r\n    useEffect(()=>{\r\n        setGdata (\r\n            [\r\n                {\"year\":\"2020년\",\"month\":\"1월\",\"corona\":0},\r\n                {\"year\":\"2020년\",\"month\":\"2월\",\"corona\":2},\r\n                {\"year\":\"2020년\",\"month\":\"3월\",\"corona\":3},\r\n                {\"year\":\"2020년\",\"month\":\"4월\",\"corona\":2},\r\n                {\"year\":\"2020년\",\"month\":\"5월\",\"corona\":0},\r\n                {\"year\":\"2020년\",\"month\":\"6월\",\"corona\":3},\r\n                {\"year\":\"2020년\",\"month\":\"7월\",\"corona\":0},\r\n                {\"year\":\"22020년\",\"month\":\"8월\",\"corona\":17},\r\n                {\"year\":\"2020년\",\"month\":\"9월\",\"corona\":3},\r\n                {\"year\":\"2020년\",\"month\":\"10월\",\"corona\":1},\r\n                {\"year\":\"2020년\",\"month\":\"11월\",\"corona\":54},\r\n                {\"year\":\"2020년\",\"month\":\"12월\",\"corona\":77},\r\n                {\"year\":\"2021년\",\"month\":\"1월\",\"corona\":34},\r\n                {\"year\":\"2021년\",\"month\":\"2월\",\"corona\":19},\r\n                {\"year\":\"2021년\",\"month\":\"3월\",\"corona\":28},\r\n                {\"year\":\"2021년\",\"month\":\"4월\",\"corona\":24},\r\n                {\"year\":\"2021년\",\"month\":\"5월\",\"corona\":77},\r\n                {\"year\":\"2021년\",\"month\":\"6월\",\"corona\":175},\r\n                {\"year\":\"2021년\",\"month\":\"7월\",\"corona\":78},\r\n                {\"year\":\"2021년\",\"month\":\"8월\",\"corona\":36}\r\n                ]\r\n        );\r\n    },[d]);\r\n\r\n    console.log(gData)\r\n    return(\r\n        <div className=\"line\">\r\n        <ResponsiveLine\r\n        data={gData}\r\n        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n        xScale={{ type: 'point' }}\r\n        yScale={{ type: 'linear', min: 'auto', max: 'auto', stacked: true, reverse: false }}\r\n        yFormat=\" >-.2f\"\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n            orient: 'bottom',\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'transportation',\r\n            legendOffset: 36,\r\n            legendPosition: 'middle'\r\n        }}\r\n        axisLeft={{\r\n            orient: 'left',\r\n            tickSize: 5,\r\n            tickPadding: 5,\r\n            tickRotation: 0,\r\n            legend: 'count',\r\n            legendOffset: -40,\r\n            legendPosition: 'middle'\r\n        }}\r\n        pointSize={10}\r\n        pointColor={{ theme: 'background' }}\r\n        pointBorderWidth={2}\r\n        pointBorderColor={{ from: 'serieColor' }}\r\n        pointLabelYOffset={-12}\r\n        useMesh={true}\r\n        legends={[\r\n            {\r\n                anchor: 'bottom-right',\r\n                direction: 'column',\r\n                justify: false,\r\n                translateX: 100,\r\n                translateY: 0,\r\n                itemsSpacing: 0,\r\n                itemDirection: 'left-to-right',\r\n                itemWidth: 80,\r\n                itemHeight: 20,\r\n                itemOpacity: 0.75,\r\n                symbolSize: 12,\r\n                symbolShape: 'circle',\r\n                symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                effects: [\r\n                    {\r\n                        on: 'hover',\r\n                        style: {\r\n                            itemBackground: 'rgba(0, 0, 0, .03)',\r\n                            itemOpacity: 1\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]}\r\n    />\r\n        </div>\r\n    );\r\n}","import {useState} from \"react\";\r\nimport Feel from \"../data/feel.json\";\r\nimport FeelGraph from \"./FeelGraph\";\r\n\r\n\r\nexport default function Service(){\r\n    let subject=[];\r\n    let [data,setData] = useState(Feel.DATA);\r\n\r\n    for(let tit in Feel.feel){\r\n        subject.push(Feel.feel[tit]);\r\n    }\r\n    function dataChange(e){\r\n        setData(\r\n            Feel.DATA.filter(day => (\r\n                day['month'] == e.target.value\r\n            ))\r\n        );\r\n    }\r\n\r\n    let feelDat= [];\r\n    Feel.DATA.forEach(function(c){\r\n        feelDat.push( c['corona'] );\r\n    });\r\n\r\n    \r\n    return(\r\n        <> \r\n        <div className=\"fourth\">\r\n        <h2>강원도 춘천시_코로나 19 확진자 월별</h2>\r\n            <select onChange={dataChange}>\r\n                {\r\n                    Feel.DATA.map(function(data,k){\r\n                        return(\r\n                            <option key={k}>\r\n                                {data['year']},\r\n                                {data['month']}\r\n                            </option>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </select>\r\n            \r\n                <table border=\"1\">\r\n                    <thead>\r\n                        <tr>\r\n                            {\r\n                                subject.map(function(tit,k){\r\n                                    return <th key={k}> {tit} </th>\r\n                                })\r\n                            }\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {\r\n                            data.map(function(dataView,k){\r\n                                return(\r\n                                    <tr key={k}>\r\n                                        <td>{dataView['year']}</td>\r\n                                        <td>{dataView['month']}</td>\r\n                                        <td>{dataView['corona']}</td>\r\n\r\n                                    </tr>    \r\n                                )\r\n                            })\r\n                        }\r\n                    </tbody>\r\n\r\n\r\n\r\n                </table>\r\n\r\n        <FeelGraph d={feelDat}/>\r\n        </div>\r\n        </>\r\n    );\r\n        }\r\n     ","\nimport './App.css';\nimport Home from './comp/Home';\nimport Main from './comp/Main';\nimport {BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport Company from './comp/Company';\nimport Service from './comp/Service';\n\nfunction App() {\n  return (\n    <>\n      <BrowserRouter>\n        <header className=\"header\">\n            <Link to=\"/home\" className=\"color\">HOME</Link>\n            <Link to=\"/main\" className=\"color\">코로나 예방접종 현황</Link>\n            <Link to=\"/company\" className=\"color\">코로나 확진현황</Link>\n            <Link to=\"/service\" className=\"color\">강원도 춘천시_코로나 19 확진자 월별</Link>\n        </header>\n        <Switch>\n          <Route exact path=\"/home\"> <Home /> </Route>\n          <Route exact path=\"/main\"> <Main /> </Route>\n          <Route path=\"/company\"> <Company/> </Route>\n          <Route path=\"/service\"> <Service/> </Route>\n        </Switch>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}